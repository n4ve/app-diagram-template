/**
 * Connection Validation Demo
 * Demonstrates that invalid connections are blocked
 */

interface PageCard extends HTMLElement {
    dataset: {
        page: string;
    };
}

interface ServerCard extends HTMLElement {
    dataset: {
        server: string;
        backend: string;
    };
}

interface BackendCard extends HTMLElement {
    dataset: {
        backend: string;
    };
}

interface DiagramController {
    connectionManager: {
        createConnectionLine: (fromElement: HTMLElement, toElement: HTMLElement) => boolean | null;
    };
}

declare global {
    interface Window {
        diagramController?: DiagramController;
    }
}

console.log('üõ°Ô∏è Connection Validation Demo');
console.log('============================');

function testConnectionValidation(): void {
    console.log('\nüß™ Testing Connection Validation Rules');
    
    // Find example elements
    const pageCard = document.querySelector('.page-card') as PageCard | null;
    const serverCard = document.querySelector('.server-card') as ServerCard | null;
    const backendCard = document.querySelector('.backend-card') as BackendCard | null;
    
    if (!pageCard || !serverCard || !backendCard) {
        console.log('‚ùå Required elements not found for testing');
        return;
    }
    
    console.log('‚úÖ Found test elements');
    console.log('  - Page card:', pageCard.dataset.page);
    console.log('  - Server card:', serverCard.dataset.server);
    console.log('  - Backend card:', serverCard.dataset.backend);
    
    // Override console.warn to capture blocked connections
    const originalWarn = console.warn;
    const blockedConnections: string[] = [];
    
    console.warn = function(...args: any[]): void {
        if (args[0] && args[0].includes('üö´ Blocked invalid connection')) {
            blockedConnections.push(args[0] as string);
        }
        originalWarn.apply(console, args);
    };
    
    // Test valid connections
    console.log('\n‚úÖ Testing Valid Connections:');
    testValidConnection(serverCard, backendCard, 'server ‚Üí backend');
    
    // Test invalid connections
    console.log('\n‚ùå Testing Invalid Connections:');
    testInvalidConnection(pageCard, pageCard, 'page ‚Üí page');
    testInvalidConnection(serverCard, serverCard, 'server ‚Üí server');
    testInvalidConnection(backendCard, backendCard, 'backend ‚Üí backend');
    testInvalidConnection(backendCard, serverCard, 'backend ‚Üí server');
    testInvalidConnection(backendCard, pageCard, 'backend ‚Üí page');
    testInvalidConnection(serverCard, pageCard, 'server ‚Üí page');
    
    // Restore console.warn
    console.warn = originalWarn;
    
    // Summary
    console.log('\nüìä Validation Results:');
    console.log(`Total blocked connections: ${blockedConnections.length}`);
    blockedConnections.forEach((blocked: string, index: number) => {
        console.log(`  ${index + 1}. ${blocked}`);
    });
    
    if (blockedConnections.length > 0) {
        console.log('\nüéâ SUCCESS: Invalid connections are being blocked!');
    } else {
        console.log('\n‚ö†Ô∏è WARNING: No connections were blocked - validation may not be working');
    }
}

function testValidConnection(fromElement: HTMLElement, toElement: HTMLElement, description: string): void {
    console.log(`\n  Testing: ${description}`);
    
    // Try to create connection through ConnectionManager
    // Note: In a real scenario, this would go through the actual connection creation flow
    if (window.diagramController && window.diagramController.connectionManager) {
        const result = window.diagramController.connectionManager.createConnectionLine(fromElement, toElement);
        if (result) {
            console.log(`    ‚úÖ Connection allowed: ${description}`);
        } else {
            console.log(`    ‚ùå Connection blocked: ${description}`);
        }
    } else {
        console.log(`    ‚ö†Ô∏è Cannot test - ConnectionManager not available`);
    }
}

function testInvalidConnection(fromElement: HTMLElement, toElement: HTMLElement, description: string): void {
    console.log(`\n  Testing: ${description}`);
    
    // Try to create connection through ConnectionManager
    if (window.diagramController && window.diagramController.connectionManager) {
        const result = window.diagramController.connectionManager.createConnectionLine(fromElement, toElement);
        if (result) {
            console.log(`    ‚ùå ERROR: Connection was allowed but should be blocked: ${description}`);
        } else {
            console.log(`    ‚úÖ Connection correctly blocked: ${description}`);
        }
    } else {
        console.log(`    ‚ö†Ô∏è Cannot test - ConnectionManager not available`);
    }
}

function demonstrateValidationRules(): void {
    console.log('\nüìã Connection Validation Rules');
    console.log('=============================');
    
    console.log('\n‚úÖ Valid Connections:');
    console.log('  ‚Ä¢ page-api ‚Üí server-api (Frontend API calls)');
    console.log('  ‚Ä¢ server ‚Üí backend (Server to database/service)');
    console.log('  ‚Ä¢ page ‚Üí server (Direct page to server)');
    
    console.log('\n‚ùå Invalid Connections (Blocked):');
    console.log('  ‚Ä¢ page ‚Üí page (Same type)');
    console.log('  ‚Ä¢ server ‚Üí server (Same type)');
    console.log('  ‚Ä¢ backend ‚Üí backend (Same type)');
    console.log('  ‚Ä¢ backend ‚Üí server (Backend cannot initiate)');
    console.log('  ‚Ä¢ backend ‚Üí page (Backend cannot initiate)');
    console.log('  ‚Ä¢ server-api ‚Üí page-api (Reverse direction)');
    console.log('  ‚Ä¢ server ‚Üí page (Reverse direction)');
    console.log('  ‚Ä¢ page-api ‚Üí page-api (Same type API)');
    console.log('  ‚Ä¢ server-api ‚Üí server-api (Same type API)');
    
    console.log('\nüéØ Architecture Flow:');
    console.log('  Frontend ‚Üí Server ‚Üí Backend');
    console.log('  (Pages)   (APIs)   (Database/Services)');
}

function runValidationDemo(): void {
    console.log('üõ°Ô∏è Running Connection Validation Demo');
    console.log('=====================================');
    
    demonstrateValidationRules();
    testConnectionValidation();
    
    console.log('\nüîí Security Benefits:');
    console.log('  ‚Ä¢ Prevents nonsensical connections');
    console.log('  ‚Ä¢ Enforces proper architecture flow');
    console.log('  ‚Ä¢ Blocks reverse data flow');
    console.log('  ‚Ä¢ Maintains clean separation of concerns');
    
    console.log('\nüí° How It Works:');
    console.log('  1. Every createConnectionLine() call is validated');
    console.log('  2. Element types are detected (page/server/backend/api)');
    console.log('  3. Connection patterns are checked against rules');
    console.log('  4. Invalid patterns return null (no connection created)');
    console.log('  5. Valid patterns proceed with line creation');
}

// Auto-run
if (typeof window !== 'undefined') {
    setTimeout(runValidationDemo, 1000);
}

export {};