---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import ArchitectureDiagram from '../components/ArchitectureDiagram.astro';
import pagesData from '../data/pages.json';
import serversData from '../data/servers.json';
import backendsData from '../data/backends.json';
import type { NestedGroupsConfig } from '../types/index.ts';

const nestedGroupsData = pagesData as NestedGroupsConfig;

// Calculate stats from nested structure
const totalPages = Object.values(nestedGroupsData.groups).reduce((sum, group) => 
  sum + Object.keys(group.pages).length, 0
);

const stats = {
  totalPages,
  totalGroups: Object.keys(nestedGroupsData.groups).length,
  totalServers: Object.keys(serversData).length,
  totalAPIs: Object.values(serversData).reduce((sum, server) => sum + server.apis.length, 0)
};
---

<Layout title="API Architecture Diagram">
  <main class="p-2 sm:p-5 w-full">
    <div class="w-full container-responsive bg-white/95 backdrop-blur-lg rounded-3xl shadow-2xl overflow-hidden">
      <Header />
      
      <div class="p-4 sm:p-8">
        <ArchitectureDiagram pagesData={nestedGroupsData} servers={serversData} backends={backendsData} />
        
        <!-- Statistics -->
        <div class="grid grid-cols-2 sm:grid-cols-4 gap-4 sm:gap-6 mt-6 sm:mt-8">
          <div class="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-6 rounded-xl text-center">
            <h3 class="text-3xl font-bold">{stats.totalPages}</h3>
            <p class="opacity-90">หน้าจอทั้งหมด</p>
          </div>
          <div class="bg-gradient-to-r from-indigo-500 to-indigo-600 text-white p-6 rounded-xl text-center">
            <h3 class="text-3xl font-bold">{stats.totalGroups}</h3>
            <p class="opacity-90">กลุ่มแอป</p>
          </div>
          <div class="bg-gradient-to-r from-purple-500 to-purple-600 text-white p-6 rounded-xl text-center">
            <h3 class="text-3xl font-bold">{stats.totalAPIs}</h3>
            <p class="opacity-90">API ทั้งหมด</p>
          </div>
          <div class="bg-gradient-to-r from-green-500 to-green-600 text-white p-6 rounded-xl text-center">
            <h3 class="text-3xl font-bold">{stats.totalServers}</h3>
            <p class="opacity-90">Servers</p>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // Simple interaction script with dimming
  document.addEventListener('DOMContentLoaded', () => {
    const pageCards = document.querySelectorAll('.page-card');
    const serverCards = document.querySelectorAll('.server-card');
    const backendCards = document.querySelectorAll('.backend-card');
    const apiItems = document.querySelectorAll('.api-item');
    const diagramContainer = document.getElementById('diagram-container');
    
    console.log('Found elements:', {
      pageCards: pageCards.length,
      serverCards: serverCards.length,
      backendCards: backendCards.length,
      apiItems: apiItems.length,
      diagramContainer: !!diagramContainer
    });
    
    // Add hover to page cards
    pageCards.forEach(pageCard => {
      const apis = JSON.parse(pageCard.dataset.apis || '[]');
      
      pageCard.addEventListener('mouseenter', () => {
        console.log('Page card hover triggered');
        
        // Add diagram-dimmed class
        if (diagramContainer) {
          diagramContainer.classList.add('diagram-dimmed');
          console.log('Added diagram-dimmed class');
          console.log('Container classes:', diagramContainer.className);
        }
        
        // Set active card
        pageCard.classList.add('active');
        console.log('Page card classes:', pageCard.className);
        
        // Highlight matching APIs
        apiItems.forEach(item => {
          if (apis.includes(item.textContent.trim())) {
            item.classList.add('highlighted');
          }
        });
      });
      
      pageCard.addEventListener('mouseleave', () => {
        console.log('Page card hover ended');
        
        // Remove diagram-dimmed class
        if (diagramContainer) {
          diagramContainer.classList.remove('diagram-dimmed');
          console.log('Removed diagram-dimmed class');
        }
        
        // Clear active states
        pageCard.classList.remove('active');
        apiItems.forEach(item => item.classList.remove('highlighted'));
      });
    });
    
    // Add hover to server cards
    serverCards.forEach(serverCard => {
      serverCard.addEventListener('mouseenter', () => {
        console.log('Server card hover triggered');
        
        // Add diagram-dimmed class
        if (diagramContainer) {
          diagramContainer.classList.add('diagram-dimmed');
          console.log('Added diagram-dimmed class');
        }
        
        // Set active card
        serverCard.classList.add('active');
        
        // Highlight related backend and dim others
        const backendId = serverCard.dataset.backend;
        console.log('Looking for backend ID:', backendId);
        
        // First, dim all backend cards
        backendCards.forEach(backend => {
          backend.style.opacity = '0.3';
          backend.style.filter = 'grayscale(1)';
        });
        
        // Then highlight the related backend
        if (backendId) {
          const relatedBackend = document.querySelector(`.backend-card[data-backend="${backendId}"]`);
          console.log('Found backend element:', !!relatedBackend);
          if (relatedBackend) {
            relatedBackend.classList.add('highlighted');
            // Force style directly to bypass CSS conflicts
            relatedBackend.style.border = '3px solid #10b981';
            relatedBackend.style.background = 'linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%)';
            relatedBackend.style.color = '#065f46';
            relatedBackend.style.transform = 'scale(1.1)';
            relatedBackend.style.boxShadow = '0 15px 35px rgba(16, 185, 129, 0.4)';
            relatedBackend.style.zIndex = '999';
            relatedBackend.style.position = 'relative';
            relatedBackend.style.opacity = '1';
            relatedBackend.style.filter = 'none';
            relatedBackend.style.fontWeight = 'bold';
            
            console.log('Added highlighted class to backend');
            console.log('Backend classes after highlight:', relatedBackend.className);
            console.log('Backend style after changes:', relatedBackend.style.background);
          }
        }
      });
      
      serverCard.addEventListener('mouseleave', () => {
        console.log('Server card hover ended');
        
        // Remove diagram-dimmed class
        if (diagramContainer) {
          diagramContainer.classList.remove('diagram-dimmed');
          console.log('Removed diagram-dimmed class');
        }
        
        // Clear active states
        serverCard.classList.remove('active');
        
        // Remove backend highlighting and restore all backends
        backendCards.forEach(backend => {
          backend.classList.remove('highlighted');
          // Clear all inline styles
          backend.style.border = '';
          backend.style.background = '';
          backend.style.color = '';
          backend.style.transform = '';
          backend.style.boxShadow = '';
          backend.style.zIndex = '';
          backend.style.position = '';
          backend.style.opacity = '';
          backend.style.filter = '';
          backend.style.fontWeight = '';
        });
      });
    });

  });
</script>

<style>
  .page-card.active {
    border-left-color: #ef4444;
    background: linear-gradient(135deg, #ffffff 0%, #fef2f2 100%);
  }
  
  .api-item.highlighted {
    background-color: #fef3cd !important;
    border-left-color: #f59e0b !important;
    transform: scale(1.02);
  }
  
  .backend-card.highlighted {
    border: 4px solid #10b981 !important;
    background: #10b981 !important;
    color: white !important;
    transform: scale(1.1) !important;
    box-shadow: 0 15px 35px rgba(16, 185, 129, 0.5) !important;
    transition: all 0.3s ease !important;
    z-index: 999 !important;
    position: relative !important;
  }
  
  .backend-card.highlighted h4,
  .backend-card.highlighted p,
  .backend-card.highlighted span {
    color: white !important;
  }
  
  .server-card.active {
    border-left-color: #3b82f6 !important;
    background: linear-gradient(135deg, #ffffff 0%, #eff6ff 100%);
    transform: translateY(-4px);
  }
</style>