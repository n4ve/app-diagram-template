---
import type { GroupData } from '../types/index.ts';

const { pageId, page, group } = Astro.props as {
  pageId: string;
  page: any;
  group: GroupData | null;
};

// Create a mapping of server names to colors for consistent visual identity
const serverColors = {
  'auth-server': { bg: 'bg-blue-500', text: 'text-white', border: 'border-blue-600', leftBorder: 'border-l-blue-500' },
  'payment-server': { bg: 'bg-green-500', text: 'text-white', border: 'border-green-600', leftBorder: 'border-l-green-500' },
  'user-server': { bg: 'bg-purple-500', text: 'text-white', border: 'border-purple-600', leftBorder: 'border-l-purple-500' },
  'analytics-server': { bg: 'bg-orange-500', text: 'text-white', border: 'border-orange-600', leftBorder: 'border-l-orange-500' },
  'notification-server': { bg: 'bg-pink-500', text: 'text-white', border: 'border-pink-600', leftBorder: 'border-l-pink-500' },
  'product-server': { bg: 'bg-indigo-500', text: 'text-white', border: 'border-indigo-600', leftBorder: 'border-l-indigo-500' },
  'order-server': { bg: 'bg-red-500', text: 'text-white', border: 'border-red-600', leftBorder: 'border-l-red-500' }
};

const serverNames = {
  'auth-server': 'Auth',
  'payment-server': 'Payment',
  'user-server': 'User',
  'analytics-server': 'Analytics', 
  'notification-server': 'Notify',
  'product-server': 'Product',
  'order-server': 'Order'
};

// Get unique servers used by this page
const uniqueServers = [...new Set((page.apis || []).map(api => api.split(':')[0]))];
---

<div 
  class="page-card bg-white rounded-xl p-5 shadow-lg border-l-4 cursor-pointer transition-all duration-300 hover:shadow-xl hover:-translate-y-2"
  style={`border-left-color: ${group?.color || '#3B82F6'}`}
  data-page={pageId}
  data-apis={JSON.stringify(page.apis || [])}
  data-group={page.groupId || ''}
>
  <!-- Group Color Indicator -->
  {group && (
    <div class="mb-3">
      <div class="w-full h-1 rounded-full" 
           style={`background-color: ${group.color}`}>
      </div>
    </div>
  )}
  
  <!-- Screenshot Display -->
  <div class="w-full flex justify-center mb-4">
    {page.screenshotType === 'web' || (!page.screenshotType && page.screenshot) ? (
      <!-- Web Screenshot Display -->
      <div class="relative w-full h-40 rounded-lg border-2 border-gray-300 overflow-hidden bg-white shadow-md">
        <!-- Browser Bar -->
        <div class="absolute top-0 left-0 right-0 h-6 bg-gray-200 border-b border-gray-300 flex items-center px-2">
          <div class="flex gap-1">
            <div class="w-2 h-2 rounded-full bg-red-400"></div>
            <div class="w-2 h-2 rounded-full bg-yellow-400"></div>
            <div class="w-2 h-2 rounded-full bg-green-400"></div>
          </div>
          <div class="ml-4 flex-1 bg-white rounded px-2 py-0.5 text-xs text-gray-500 truncate">
            {page.name.toLowerCase().replace(/\s+/g, '-')}.example.com
          </div>
        </div>
        
        <!-- Web Content -->
        <div class="absolute top-6 left-0 right-0 bottom-0 overflow-hidden bg-gray-50">
          {page.screenshot ? (
            <img 
              src={page.screenshot} 
              alt={`${page.name} screenshot`}
              class="w-full h-full object-contain"
              loading="lazy"
            />
          ) : (
            <div class="w-full h-full flex flex-col items-center justify-center">
              <div class="text-3xl mb-2 opacity-20">üåê</div>
              <div class="text-xs text-gray-400 font-medium">No file</div>
            </div>
          )}
        </div>
      </div>
    ) : (
      <!-- Phone Screenshot Display -->
      <div class="relative w-24 h-48 rounded-xl border-4 border-gray-800 overflow-hidden bg-black shadow-lg">
        <!-- Phone frame top notch -->
        <div class="absolute top-0 left-1/2 transform -translate-x-1/2 w-12 h-1 bg-gray-800 rounded-b-full z-10"></div>
        
        <!-- Screen content -->
        <div class="absolute inset-1 rounded-lg overflow-hidden bg-gray-100">
          {page.screenshot ? (
            <img 
              src={page.screenshot} 
              alt={`${page.name} screenshot`}
              class="w-full h-full object-contain"
              loading="lazy"
            />
          ) : (
            <div class="w-full h-full flex flex-col items-center justify-center bg-gradient-to-b from-gray-50 to-gray-100">
              <div class="text-3xl mb-2 opacity-20">üì±</div>
              <div class="text-xs text-gray-400 font-medium">No file</div>
            </div>
          )}
        </div>
        
        <!-- Phone frame bottom home indicator -->
        <div class="absolute bottom-1 left-1/2 transform -translate-x-1/2 w-8 h-1 bg-gray-600 rounded-full"></div>
      </div>
    )}
  </div>
  
  <h3 class="text-lg font-semibold text-gray-800 mb-1">{group?.name || 'Unknown Group'}</h3>
  <p class="text-sm font-medium text-gray-700 mb-2">{page.name}</p>
  <p class="text-gray-600 text-sm mb-3">{page.description}</p>
  
  <!-- Server Legend -->
  <div class="mb-4">
    <div class="text-xs font-medium text-gray-600 mb-2">Connected Servers:</div>
    <div class="flex flex-wrap gap-1">
      {uniqueServers.map(serverId => {
        const colors = serverColors[serverId] || { bg: 'bg-gray-500', text: 'text-white', border: 'border-gray-600' };
        return (
          <span class={`px-2 py-1 text-xs font-medium rounded-full border ${colors.bg} ${colors.text} ${colors.border}`}>
            {serverNames[serverId] || serverId}
          </span>
        );
      })}
    </div>
  </div>
  
  <!-- APIs List -->
  <div class="space-y-2">
    {(page.apis || []).map(api => {
      // API format: "server-name:METHOD /path"
      const [serverName, apiPath] = api.split(':');
      const [method, ...pathParts] = apiPath.trim().split(' ');
      const path = pathParts.join(' ');
      const fullApiText = `${method} ${path}`;
      
      return (
        <div 
          class={`api-item px-3 py-2 rounded-lg text-sm border-l-4 transition-all duration-300 ${serverColors[serverName]?.leftBorder || 'border-l-gray-400'} bg-gray-50 hover:bg-gray-100`}
          data-server-id={serverName}
          data-api-text={fullApiText}
          data-full-api={api}
        >
          <div class="flex items-center justify-between gap-2">
            <div class="flex items-center gap-2 flex-1">
              <span class={`px-2 py-1 text-xs font-semibold rounded ${
                method === 'GET' ? 'bg-green-100 text-green-800' :
                method === 'POST' ? 'bg-blue-100 text-blue-800' :
                method === 'PUT' ? 'bg-yellow-100 text-yellow-800' :
                method === 'DELETE' ? 'bg-red-100 text-red-800' :
                method === 'PATCH' ? 'bg-purple-100 text-purple-800' :
                'bg-gray-100 text-gray-800'
              }`}>
                {method}
              </span>
              <span class="font-mono text-gray-700 flex-1">{path}</span>
            </div>
            <div class="flex items-center">
              <span class={`px-2 py-1 text-xs font-medium rounded-full border ${serverColors[serverName] ? `${serverColors[serverName].bg} ${serverColors[serverName].text} ${serverColors[serverName].border}` : 'bg-gray-500 text-white border-gray-600'}`}>
                {serverNames[serverName] || serverName}
              </span>
            </div>
          </div>
          <!-- Hidden text for JavaScript matching -->
          <span class="sr-only">{fullApiText}</span>
        </div>
      );
    })}
  </div>
  
  <div class="mt-3 text-xs text-gray-500">
    {(page.apis || []).length} APIs
  </div>
</div>