---
import type { GroupData } from '../types/index.ts';

const { pageId, page, group } = Astro.props as {
  pageId: string;
  page: any;
  group: GroupData | null;
};

// Create a mapping of server names to colors for consistent visual identity
const serverColors = {
  'auth-server': { bg: 'bg-blue-500', text: 'text-white', border: 'border-blue-600', leftBorder: 'border-l-blue-500' },
  'payment-server': { bg: 'bg-green-500', text: 'text-white', border: 'border-green-600', leftBorder: 'border-l-green-500' },
  'user-server': { bg: 'bg-purple-500', text: 'text-white', border: 'border-purple-600', leftBorder: 'border-l-purple-500' },
  'analytics-server': { bg: 'bg-orange-500', text: 'text-white', border: 'border-orange-600', leftBorder: 'border-l-orange-500' },
  'notification-server': { bg: 'bg-pink-500', text: 'text-white', border: 'border-pink-600', leftBorder: 'border-l-pink-500' },
  'product-server': { bg: 'bg-indigo-500', text: 'text-white', border: 'border-indigo-600', leftBorder: 'border-l-indigo-500' },
  'order-server': { bg: 'bg-red-500', text: 'text-white', border: 'border-red-600', leftBorder: 'border-l-red-500' }
};

const serverNames = {
  'auth-server': 'Auth',
  'payment-server': 'Payment',
  'user-server': 'User',
  'analytics-server': 'Analytics', 
  'notification-server': 'Notify',
  'product-server': 'Product',
  'order-server': 'Order'
};

// Get unique servers used by this page
const uniqueServers = [...new Set((page.apis || []).map(api => api.split(':')[0]))];
---

<div 
  class="page-card bg-white rounded-xl p-5 shadow-lg border-l-4 cursor-pointer transition-all duration-300 hover:shadow-xl hover:-translate-y-2"
  style={`border-left-color: ${group?.color || '#3B82F6'}`}
  data-page={pageId}
  data-apis={JSON.stringify(page.apis || [])}
  data-group={page.groupId || ''}
>
  <!-- Group Badge -->
  {group && (
    <div class="mb-3">
      <div class="inline-flex items-center gap-2 px-3 py-1 rounded-full text-xs font-medium" 
           style={`background-color: ${group.color}20; color: ${group.color}; border: 1px solid ${group.color}40`}>
        <span class="text-sm">ðŸ“‚</span>
        <span>{group.name}</span>
      </div>
    </div>
  )}
  
  <!-- Screenshot Placeholder -->
  <div class="w-full h-32 rounded-lg mb-4 border-2 border-gray-200 overflow-hidden bg-gray-50">
    <div class="w-full h-full flex flex-col items-center justify-center text-gray-400">
      <div class="text-2xl mb-1">ðŸ“±</div>
      <div class="text-xs">No Screenshot</div>
    </div>
  </div>
  
  <h3 class="text-lg font-semibold text-gray-800 mb-2">{page.name}</h3>
  <p class="text-gray-600 text-sm mb-3">{page.description}</p>
  
  <!-- Server Legend -->
  <div class="mb-4">
    <div class="text-xs font-medium text-gray-600 mb-2">Connected Servers:</div>
    <div class="flex flex-wrap gap-1">
      {uniqueServers.map(serverId => {
        const colors = serverColors[serverId] || { bg: 'bg-gray-500', text: 'text-white', border: 'border-gray-600' };
        return (
          <span class={`px-2 py-1 text-xs font-medium rounded-full border ${colors.bg} ${colors.text} ${colors.border}`}>
            {serverNames[serverId] || serverId}
          </span>
        );
      })}
    </div>
  </div>
  
  <!-- APIs List -->
  <div class="space-y-2">
    {(page.apis || []).map(api => {
      // API format: "server-name:METHOD /path"
      const [serverName, apiPath] = api.split(':');
      const [method, ...pathParts] = apiPath.trim().split(' ');
      const path = pathParts.join(' ');
      const fullApiText = `${method} ${path}`;
      
      return (
        <div 
          class={`api-item px-3 py-2 rounded-lg text-sm border-l-4 transition-all duration-300 ${serverColors[serverName]?.leftBorder || 'border-l-gray-400'} bg-gray-50 hover:bg-gray-100`}
          data-server-id={serverName}
          data-api-text={fullApiText}
          data-full-api={api}
        >
          <div class="flex items-center justify-between gap-2">
            <div class="flex items-center gap-2 flex-1">
              <span class={`px-2 py-1 text-xs font-semibold rounded ${
                method === 'GET' ? 'bg-green-100 text-green-800' :
                method === 'POST' ? 'bg-blue-100 text-blue-800' :
                method === 'PUT' ? 'bg-yellow-100 text-yellow-800' :
                method === 'DELETE' ? 'bg-red-100 text-red-800' :
                method === 'PATCH' ? 'bg-purple-100 text-purple-800' :
                'bg-gray-100 text-gray-800'
              }`}>
                {method}
              </span>
              <span class="font-mono text-gray-700 flex-1">{path}</span>
            </div>
            <div class="flex items-center">
              <span class={`px-2 py-1 text-xs font-medium rounded-full border ${serverColors[serverName] ? `${serverColors[serverName].bg} ${serverColors[serverName].text} ${serverColors[serverName].border}` : 'bg-gray-500 text-white border-gray-600'}`}>
                {serverNames[serverName] || serverName}
              </span>
            </div>
          </div>
          <!-- Hidden text for JavaScript matching -->
          <span class="sr-only">{fullApiText}</span>
        </div>
      );
    })}
  </div>
  
  <div class="mt-3 text-xs text-gray-500">
    {(page.apis || []).length} APIs
  </div>
</div>