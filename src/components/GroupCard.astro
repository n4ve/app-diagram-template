---
import type { GroupData } from '../types/index.ts';

const { groupId, group } = Astro.props as {
  groupId: string;
  group: GroupData;
};

// Get all pages that belong to this group (now nested under group.pages)
const groupPages = Object.entries(group.pages);

// Collect all unique APIs from all pages in the group
const allApis = new Set<string>();
groupPages.forEach(([_, page]) => {
  page.apis.forEach(api => allApis.add(api));
});

// Group APIs by server
const apisByServer = new Map<string, Set<string>>();
groupPages.forEach(([_, page]) => {
  page.apis.forEach(api => {
    const [serverId, apiPath] = api.split(':');
    if (!apisByServer.has(serverId)) {
      apisByServer.set(serverId, new Set());
    }
    apisByServer.get(serverId)?.add(apiPath);
  });
});

// Server display names and colors
const serverInfo = {
  'auth-server': { name: 'Auth', color: '#3B82F6' },
  'payment-server': { name: 'Payment', color: '#10B981' },
  'user-server': { name: 'User', color: '#8B5CF6' },
  'analytics-server': { name: 'Analytics', color: '#F97316' },
  'notification-server': { name: 'Notify', color: '#EC4899' },
  'product-server': { name: 'Product', color: '#6366F1' },
  'order-server': { name: 'Order', color: '#EF4444' }
};

// Define group icons based on groupId
const groupIcons = {
  'user-portal': 'üë§',
  'order-application': 'üõí',
  'product-management': 'üì¶',
  'analytics-dashboard': 'üìä',
  'admin-portal': '‚öôÔ∏è',
  'payment-gateway': 'üí≥'
};

const groupIcon = groupIcons[groupId as keyof typeof groupIcons] || 'üìÅ';
---

<div 
  class="group-card bg-white rounded-xl p-6 shadow-lg border-l-4 cursor-pointer transition-all duration-300 hover:shadow-xl hover:-translate-y-2 min-h-[280px] flex flex-col"
  style={`border-left-color: ${group.color}`}
  data-group={groupId}
  data-pages={JSON.stringify(groupPages.map(([pageId]) => pageId))}
  data-apis={JSON.stringify(Array.from(allApis))}
>
  <!-- Group Header -->
  <div class="flex items-center gap-4 mb-6">
    <div class="w-16 h-16 rounded-xl flex items-center justify-center shadow-md" style={`background: linear-gradient(135deg, ${group.color}, ${group.color}dd)`}>
      <span class="text-white text-3xl">{groupIcon}</span>
    </div>
    <div class="flex-1">
      <h3 class="text-xl font-bold text-gray-800">{group.name}</h3>
      <p class="text-gray-600 text-sm mt-1">{group.description}</p>
    </div>
  </div>
  
  <!-- Visual Representation -->
  <div class="flex-1 flex flex-col">
    <!-- Stats Row -->
    <div class="grid grid-cols-2 gap-4 mb-6">
      <div class="bg-gray-50 rounded-lg p-3 text-center">
        <div class="text-2xl font-bold" style={`color: ${group.color}`}>
          {groupPages.length}
        </div>
        <div class="text-xs text-gray-600 font-medium">Pages</div>
      </div>
      <div class="bg-gray-50 rounded-lg p-3 text-center">
        <div class="text-2xl font-bold" style={`color: ${group.color}`}>
          {allApis.size}
        </div>
        <div class="text-xs text-gray-600 font-medium">Total APIs</div>
      </div>
    </div>
    
    <!-- Server Connections -->
    <div class="flex-1">
      <div class="text-xs font-semibold text-gray-700 mb-3">Connected Servers:</div>
      <div class="space-y-3">
        {Array.from(apisByServer.entries()).map(([serverId, apis]) => {
          const server = serverInfo[serverId as keyof typeof serverInfo] || { name: serverId, color: '#6B7280' };
          return (
            <div class="bg-white rounded-lg p-3 border border-gray-200 shadow-sm">
              <!-- Server Header -->
              <div class="flex items-center justify-between mb-2">
                <div class="flex items-center gap-2">
                  <div 
                    class="w-3 h-3 rounded-full"
                    style={`background-color: ${server.color}`}
                  ></div>
                  <span class="font-medium text-sm text-gray-800">{server.name}</span>
                </div>
                <span 
                  class="text-xs px-2 py-1 rounded-full font-medium"
                  style={`background-color: ${server.color}20; color: ${server.color}`}
                >
                  {apis.size} APIs
                </span>
              </div>
              
            </div>
          );
        })}
      </div>
    </div>
    
    <!-- Page Names Preview -->
    <div class="mt-4 bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg p-3">
      <div class="text-xs font-semibold text-gray-700 mb-2">Pages ({groupPages.length}):</div>
      <div class="flex flex-wrap gap-2">
        {groupPages.slice(0, 3).map(([pageId, page]) => (
          <div 
            class="text-xs px-2 py-1 rounded-full bg-white shadow-sm border"
            style={`color: ${group.color}; border-color: ${group.color}40`}
          >
            {page.name}
          </div>
        ))}
        {groupPages.length > 3 && (
          <div class="text-xs px-2 py-1 text-gray-500">
            +{groupPages.length - 3} more
          </div>
        )}
      </div>
    </div>
  </div>
</div>