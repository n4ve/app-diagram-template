---
const { serverId, server } = Astro.props;

// Import server colors for consistent theming
import { getServerColor } from '../utils/serverColors.ts';
const serverColor = getServerColor(serverId);

// Import API frequency utilities
import { 
  getServerApiFrequency, 
  sortApisByFrequency, 
  getTotalPageConnections,
  isMostUsedApi 
} from '../utils/apiFrequency.ts';

const apiFrequency = getServerApiFrequency(serverId);
const totalPageConnections = getTotalPageConnections(serverId);
---

<div class={`server-card bg-white rounded-xl p-5 shadow-lg border-l-4 ${serverColor.leftBorder} transition-all duration-300 hover:shadow-xl hover:-translate-y-2`} data-server={serverId} data-backend={server.backend}>
  <div class="flex items-center justify-between mb-2">
    <h3 class="text-lg font-semibold text-gray-800">{server.name}</h3>
    <span class={`px-2 py-1 text-xs font-medium rounded-full border ${serverColor.bg} ${serverColor.text} ${serverColor.border}`}>
      {serverId}
    </span>
  </div>
  <p class="text-gray-600 text-sm mb-3">{server.description}</p>
  
  <div class="flex flex-wrap gap-2 mb-3">
    <div class="inline-block bg-green-500 text-white px-3 py-1 rounded-full text-xs font-medium">
      {(server.apis || []).length} APIs
    </div>
    {totalPageConnections > 0 && (
      <div class="inline-block bg-blue-500 text-white px-3 py-1 rounded-full text-xs font-medium">
        Used by {totalPageConnections} page connection{totalPageConnections > 1 ? 's' : ''}
      </div>
    )}
    {server.types && server.types.map(type => (
      <div class={`inline-block px-3 py-1 rounded-full text-xs font-medium ${
        type === 'Kubernetes' ? 'bg-blue-100 text-blue-800 border border-blue-300' :
        type === 'Cloud' ? 'bg-purple-100 text-purple-800 border border-purple-300' :
        type === 'On-Premise' ? 'bg-orange-100 text-orange-800 border border-orange-300' :
        'bg-gray-100 text-gray-800 border border-gray-300'
      }`}>
        {type}
      </div>
    ))}
  </div>
  
  <div class="space-y-2">
    {sortApisByFrequency(server.apis || [], apiFrequency).map((api, index) => {
      // Handle both string and object API formats
      const apiEndpoint = typeof api === 'string' ? api : api.endpoint;
      const apiStatus = typeof api === 'object' ? api.status : undefined;
      const isProtobuf = typeof api === 'object' ? api.protobuf : false;
      
      // Parse API to extract method and path
      const [method, ...pathParts] = apiEndpoint.trim().split(' ');
      const path = pathParts.join(' ');
      const usageCount = apiFrequency[apiEndpoint] || 0;
      const isHighestUsage = index === 0 && isMostUsedApi(apiEndpoint, serverId);
      
      return (
        <div 
          class={`api-item px-3 py-2 rounded-lg text-sm border-l-2 transition-all duration-300 ${
            isHighestUsage ? 
              'bg-gradient-to-r from-blue-50 to-blue-100 border-l-blue-500 shadow-md' :
              usageCount > 1 ? 'bg-green-50 border-l-green-400' :
              usageCount === 1 ? 'bg-yellow-50 border-l-yellow-400' :
              'bg-gray-100 border-l-gray-400'
          }`}
          data-api={`${serverId}:${apiEndpoint}`}
          data-full-api={`${serverId}:${apiEndpoint}`}
          data-server-id={serverId}
          data-api-text={apiEndpoint}
        >
          <div class="flex items-center justify-between gap-2">
            <div class="flex items-center gap-2 flex-1">
              <span class={`px-2 py-1 text-xs font-semibold rounded ${
                method === 'GET' ? 'bg-green-100 text-green-800' :
                method === 'POST' ? 'bg-blue-100 text-blue-800' :
                method === 'PUT' ? 'bg-yellow-100 text-yellow-800' :
                method === 'DELETE' ? 'bg-red-100 text-red-800' :
                method === 'PATCH' ? 'bg-purple-100 text-purple-800' :
                'bg-gray-100 text-gray-800'
              }`}>
                {method}
              </span>
              <span class="font-mono text-gray-700 truncate">{path}</span>
              {isProtobuf && (
                <span class="px-2 py-1 text-xs font-bold bg-purple-600 text-white rounded" title="Protocol Buffer">
                  Proto
                </span>
              )}
              {apiStatus === 'new' && (
                <span class="px-2 py-1 text-xs font-bold bg-green-500 text-white rounded-full animate-pulse">
                  NEW
                </span>
              )}
              {isHighestUsage && (
                <span class="px-2 py-1 text-xs font-bold bg-orange-100 text-orange-800 rounded-full border border-orange-300">
                  ðŸ”¥ MOST USED
                </span>
              )}
            </div>
            {usageCount > 0 && (
              <div class="flex items-center gap-1">
                <span class={`text-xs font-semibold px-2 py-1 rounded-full ${
                  usageCount > 2 ? 'bg-red-100 text-red-700' :
                  usageCount === 2 ? 'bg-orange-100 text-orange-700' :
                  'bg-blue-100 text-blue-700'
                }`}>
                  {usageCount} page{usageCount > 1 ? 's' : ''}
                </span>
              </div>
            )}
          </div>
          <!-- Hidden text for JavaScript matching -->
          <span class="sr-only">{apiEndpoint}</span>
        </div>
      );
    })}
  </div>
</div>