---
import PageCard from './PageCard.astro';
import GroupCard from './GroupCard.astro';
import ServerCard from './ServerCard.astro';
import BackendCard from './BackendCard.astro';
import ConnectionArea from './ConnectionArea.astro';
import ViewToggle from './ViewToggle.astro';
import GroupFilter from './GroupFilter.astro';
import type { NestedGroupsConfig, PagesConfig } from '../types/index.ts';

const { pagesData, servers, backends } = Astro.props as {
  pagesData: NestedGroupsConfig;
  servers: any;
  backends: any;
};

const { groups } = pagesData;

// Flatten pages from nested structure for page view
const flattenedPages: PagesConfig = {};
Object.entries(groups).forEach(([groupId, group]) => {
  Object.entries(group.pages).forEach(([pageId, page]) => {
    flattenedPages[pageId] = {
      ...page,
      groupId // Add groupId back for compatibility
    };
  });
});
---

<section class="bg-gray-50 rounded-2xl p-4 sm:p-8 mb-6 sm:mb-8 relative">
  <div class="flex flex-col gap-4 mb-6">
    <div class="flex justify-between items-center">
      <h2 class="text-2xl font-bold text-gray-800">üìä Application Architecture</h2>
      
      <!-- Controls -->
      <div class="flex items-center space-x-4">
        <!-- Zoom Controls -->
        <div class="flex items-center space-x-2">
          <button id="zoom-out" class="px-3 py-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
            </svg>
          </button>
          <span id="zoom-level" class="px-3 py-1 bg-white border border-gray-300 rounded text-sm font-medium">100%</span>
          <button id="zoom-in" class="px-3 py-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
          </button>
          <button id="zoom-reset" class="px-3 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors text-sm">
            Reset View
          </button>
        </div>
      </div>
    </div>
    
    <!-- View Toggle with inline Group Filter -->
    <ViewToggle currentView="page" />
    
    <!-- Hidden Group Filter (moved to inline position by JavaScript) -->
    <GroupFilter currentView="page" selectedGroup="all" />
  </div>
  
  <div id="diagram-container" class="overflow-auto w-full border border-gray-200 rounded-lg bg-white relative cursor-grab">
    <!-- Connection SVG - positioned relative to diagram container -->
    <svg id="connection-svg" class="absolute inset-0 w-full h-full pointer-events-none" style="z-index: 10;">
        <!-- Lines will be drawn here -->
    </svg>
    
    <div id="diagram-content" class="flex flex-col lg:flex-row gap-6 lg:gap-8 p-4 lg:p-8 transition-transform duration-150 ease-out" style="transform: translate(0px, 0px) scale(1); width: 100%; min-width: 300%;">
      <!-- Frontend Pages/Groups Column -->
      <div class="section-pages w-full lg:flex-1 min-w-0">
        <h3 id="pages-column-title" class="section-header text-xl font-semibold text-gray-800 text-center">üì± Frontend Pages</h3>
        
        <div class="grid-scroll-wrapper">
          <!-- Page View -->
          <div id="page-view" class="pages-grid">
            {Object.entries(flattenedPages).map(([pageId, page]) => {
              const groupData = page.groupId ? groups[page.groupId] : null;
              return (
                <PageCard pageId={pageId} page={page} group={groupData} servers={servers} />
              );
            })}
          </div>
          
          <!-- Group View (hidden by default) -->
          <div id="group-view" class="groups-grid hidden">
            {Object.entries(groups).map(([groupId, group]) => (
              <GroupCard groupId={groupId} group={group} servers={servers} />
            ))}
          </div>
        </div>
      </div>

      <!-- Visual Separator -->
      <div class="section-separator hidden lg:flex">
        <div class="separator-arrow">
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
          </svg>
        </div>
      </div>
      
      <!-- Connection Area -->
      <div class="connection-area-wrapper hidden lg:flex">
        <ConnectionArea />
      </div>
      
      <!-- Visual Separator -->
      <div class="section-separator hidden lg:flex">
        <div class="separator-arrow">
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
          </svg>
        </div>
      </div>

      <!-- API Servers Column -->
      <div class="section-servers w-full lg:flex-1 min-w-0">
        <h3 class="section-header text-xl font-semibold text-gray-800 text-center">üñ•Ô∏è API Servers</h3>
        <div class="grid-scroll-wrapper">
          <div class="servers-grid">
            {Object.entries(servers).map(([serverId, server]) => (
              <ServerCard serverId={serverId} server={server} />
            ))}
          </div>
        </div>
      </div>

      <!-- Backend Services Column -->
      <div class="section-backends w-full lg:flex-1 min-w-0">
        <h3 class="section-header text-xl font-semibold text-gray-800 text-center">üíæ Backend Services</h3>
        <div class="grid-scroll-wrapper">
          <div class="backends-grid">
            {Object.entries(backends).map(([backendId, backend]) => (
              <BackendCard backendId={backendId} backend={backend} />
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>
</section>


<style>
/* Container styles */
#diagram-container {
    height: 70vh;
    min-height: 500px;
    max-height: 800px;
    width: 100%;
    user-select: none;
    position: relative;
    cursor: grab;
}

#diagram-container.grabbing {
    cursor: grabbing !important;
}

/* Content styles */
#diagram-content {
    width: 300% !important;
    min-width: 300% !important;
    min-height: 100%;
    padding: 1rem;
    box-sizing: border-box;
    display: flex !important;
}

/* Allow interactions with specific elements */
.api-item,
.page-card,
.server-card {
    pointer-events: auto;
}

/* Smooth transitions for hover effects only */
#diagram-content .page-card,
#diagram-content .server-card {
    transition: transform 0.3s ease, opacity 0.3s ease;
}

/* Disable all transitions during pan/zoom */
#diagram-content.no-transition,
#diagram-content.no-transition *,
#diagram-content.no-transition .page-card,
#diagram-content.no-transition .server-card {
    transition: none !important;
}

/* Mobile optimizations */
@media (max-width: 768px) {
    #diagram-container {
        height: 60vh;
        min-height: 400px;
        max-height: 600px;
    }
    
    #diagram-content {
        padding: 0.5rem;
    }
}

/* Large screen optimizations */
@media (min-width: 1200px) {
    #diagram-container {
        height: 75vh;
        max-height: 900px;
    }
    
    #diagram-content {
        padding: 2rem;
    }
}

/* Ensure content fills container */
#diagram-content {
    position: relative;
    overflow: visible;
}

/* Fix flex children width on large screens */
@media (min-width: 1024px) {
    #diagram-content {
        justify-content: space-between;
    }
    
    #diagram-content > div:first-child,
    #diagram-content > div:nth-child(3),
    #diagram-content > div:last-child {
        flex: 1;
        min-width: 0;
        max-width: calc(30% - 1rem);
    }
    
    #diagram-content > div:nth-child(2) {
        flex: 0 0 auto;
        max-width: 12rem;
        width: 12rem;
    }
}
</style>