---
import type { ViewMode } from '../types/index.ts';
import pageGroups from '../data/pages.json';

const { currentView = 'page', selectedGroup = 'all' } = Astro.props as {
  currentView?: ViewMode;
  selectedGroup?: string;
};

// Always render but control visibility through CSS and JS
const groups = Object.entries(pageGroups.groups);
---

<!-- Compact Inline Group Filter -->
<div class="group-filter-container" style="display: none;">
  <div class="relative">
    <button
      id="group-filter-dropdown-toggle"
      class="group-filter-dropdown-toggle px-3 py-2 bg-white border border-gray-300 rounded-lg text-sm font-medium text-left flex items-center gap-2 hover:border-purple-300 hover:shadow-md transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 min-w-[200px]"
      aria-haspopup="true"
      aria-expanded="false"
    >
      <svg class="w-4 h-4 text-purple-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
      </svg>
      <div class="flex items-center gap-2 flex-1 min-w-0" id="selected-group-display">
        <span class="text-sm">üåê</span>
        <span class="font-medium text-gray-800 truncate">All Groups</span>
      </div>
      <svg class="w-4 h-4 text-gray-400 transition-transform duration-200 flex-shrink-0" id="dropdown-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
      </svg>
    </button>

    <!-- Dropdown Menu -->
    <div
      id="group-filter-dropdown-menu"
      class="group-filter-dropdown-menu absolute top-full right-0 w-64 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg z-50 opacity-0 invisible transform scale-95 transition-all duration-200"
      role="menu"
      aria-labelledby="group-filter-dropdown-toggle"
    >
      <!-- All Groups Option -->
      <button
        id="filter-all-btn"
        class="group-filter-option w-full px-4 py-3 text-left hover:bg-purple-50 border-b border-gray-100 transition-colors duration-200 focus:outline-none focus:bg-purple-50"
        data-group="all"
        role="menuitem"
      >
        <div class="flex items-center gap-3">
          <span class="text-sm">üåê</span>
          <span class="font-medium text-gray-800">All Groups</span>
        </div>
      </button>

      <!-- Individual Group Options -->
      {groups.map(([groupId, groupData]) => (
        <button
          id={`filter-${groupId}-btn`}
          class="group-filter-option w-full px-4 py-3 text-left hover:bg-purple-50 border-b border-gray-100 last:border-b-0 transition-colors duration-200 focus:outline-none focus:bg-purple-50"
          data-group={groupId}
          role="menuitem"
        >
          <div class="flex items-center gap-3">
            <div 
              class="w-3 h-3 rounded-full border border-white shadow-sm flex-shrink-0"
              style={{ backgroundColor: groupData.color }}
            ></div>
            <span class="font-medium text-gray-800">{groupData.name}</span>
          </div>
        </button>
      ))}
      
      <!-- Footer with description -->
      <div class="px-4 py-2 border-t border-gray-100 bg-gray-50 rounded-b-lg">
        <p class="text-xs text-gray-600" id="filter-description">
          {selectedGroup === 'all' 
            ? 'Showing all application groups'
            : `Showing only ${groups.find(([id]) => id === selectedGroup)?.[1]?.name || 'selected'} group`
          }
        </p>
      </div>
    </div>
  </div>
</div>